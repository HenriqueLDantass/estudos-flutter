GestureDetector(
  onTap: () {
    setState(() {
      store.activePage = 0;
    });
    store.scroll.animateTo(
        MediaQuery.of(context).size.width * 0,
        duration: const Duration(milliseconds: 300),
        curve: Curves.linear);
  },
  child: Padding(
    padding: const EdgeInsets.symmetric(horizontal: 8.0),
    child: Column(
      children: [
        Container(
          height: 60,
          width: 150,
          color: Colors.amber,
        ),
        Container(
          height: 6,
          width: 150,
          color: store.activePage == 0
              ? Colors.red
              : Colors.amber,
        ),
      ],
    ),
  ),
),
GestureDetector(
  onTap: () {
    setState(() {
      store.activePage = 1;
    });
    store.scroll.animateTo(
        MediaQuery.of(context).size.width * 1,
        duration: const Duration(milliseconds: 300),
        curve: Curves.linear);
  },
  child: Padding(
    padding: const EdgeInsets.symmetric(horizontal: 8.0),
    child: Column(
      children: [
        Container(
          height: 60,
          width: 150,
          color: Colors.amber,
        ),
        Container(
          height: 6,
          width: 150,
          color: store.activePage == 1
              ? Colors.red
              : Colors.amber,
        ),
      ],
    ),
  ),
),
GestureDetector(
  onTap: () {
    setState(() {
      store.activePage = 2;
    });

    store.scroll.animateTo(
        MediaQuery.of(context).size.width * 2,
        duration: const Duration(milliseconds: 300),
        curve: Curves.linear);
  },
  child: Padding(
    padding: const EdgeInsets.symmetric(horizontal: 8.0),
    child: Column(
      children: [
        Container(
          height: 60,
          width: 150,
          color: Colors.amber,
        ),
        Container(
          height: 6,
          width: 150,
          color: store.activePage == 2
              ? Colors.red
              : Colors.amber,
        ),
      ],
    ),
  ),
)











class LocalDataSource {
  Future<void> init() async {
    String path = '';

    path = await getDatabasesPath();
    String dbPath = path + "dboff.db";
    deleteDatabase(dbPath).then((value) => print("Banco apagado"));
    openDatabase(
      dbPath,
      version: 1,
      onCreate: (db, version) {
        db.execute("""
CREATE TABLE agendamento (id INTEGER PRIMARY KEY AUTOINCREMENT,nome TEXT, data TEXT

)
""");
        db.close();
      },
    );
  }

  Future<List<Map<String, Object?>>> getAgendamentoById(String nome) async {
    String path = '';

    path = await getDatabasesPath();
    String dbPath = path + "dboff.db";

    Database db = await openDatabase(dbPath);
    var resultar =
        await db.rawQuery("SELECT * FROM agendamento WHERE nome = ?", [nome]);

    // db.execute("SELECT * FROM agendamento WHERE nome = ?", [nome]);
    db.close();
    return resultar;
  }

  insertAgendamentoById(String nome) async {
    String path = '';

    path = await getDatabasesPath();
    String dbPath = path + "dboff.db";

    Database db = await openDatabase(dbPath);
    db.execute("INSERT INTO agendamento (nome, data) VALUES (?,?)",
        [nome, DateTime.now().toString()]);
    db.close();
  }
}










































import 'package:flutter/material.dart';
import 'package:gotraining/modules/calendar/models/calendar_model.dart';
import 'package:gotraining/modules/calendar/stores/calendar_stores.dart';
import 'package:gotraining/modules/calendar/widgets/menu_buttom_widget.dart';
import 'package:intl/intl.dart';
import 'package:path/path.dart';

import 'package:provider/provider.dart';
import 'package:table_calendar/table_calendar.dart';

class CalendarPage extends StatefulWidget {
  const CalendarPage({super.key});

  @override
  State<CalendarPage> createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => CalendarStore(),
      child: Consumer<CalendarStore>(
        builder: (context, store, _) {
          return Scaffold(
            appBar: AppBar(
              title: const Text('Agendamento'),
            ),
            body: Column(
              children: [
                TableCalendar(
                  firstDay: DateTime(2000),
                  lastDay: DateTime(2100),
                  focusedDay: store.selectedDate ?? DateTime.now(),
                  calendarFormat: CalendarFormat.month,
                  onDaySelected: (selectedDate, focusedDate) {
                    store.selectedDate = selectedDate;
                    store.loadEventos();
                  },
                ),
                Expanded(
                  child: ListView.builder(
                    itemCount: store.eventos.length,
                    itemBuilder: (context, index) {
                      final evento = store.eventos[index];
                      return ListTile(
                        title: Text(
                          DateFormat('dd/MM/yyyy').format(evento.data.toUtc()),
                        ),
                        subtitle: Text(evento.descricao),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: Icon(Icons.edit),
                              onPressed: () {},
                            ),
                            IconButton(
                              icon: Icon(Icons.delete),
                              onPressed: () {
                                store.removerEvento(evento);
                              },
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
            floatingActionButton: const MenuButtom(),
          );
        },
      ),
    );
  }
}





















import 'package:flutter/material.dart';
import 'package:gotraining/core/utils/colors/app_colors.dart';
import 'package:gotraining/modules/calendar/models/calendar_model.dart';
import 'package:gotraining/modules/calendar/stores/calendar_stores.dart';
import 'package:gotraining/modules/solicitados/widgets/card_grey_widget.dart';
import 'package:gotraining/modules/solicitados/widgets/checkout_widget.dart';
import 'package:gotraining/modules/solicitados/widgets/conteudo_menu.dart';
import 'package:gotraining/modules/solicitados/widgets/flotingacitonbutton_widget.dart';
import 'package:gotraining/modules/solicitados/widgets/header_solicitado.dart';
import 'package:gotraining/modules/solicitados/widgets/scroll_titulo_widget.dart';
import 'package:provider/provider.dart';

class SolicitadoPage extends StatefulWidget {
  final int index;
  final String loja;
  final String calendario;
  final String timeInicio;
  final String timeTermino;
  final String local;
  final String tema;
  final String treinamento;
  String check;

  SolicitadoPage({
    Key? key,
    required this.index,
    required this.loja,
    required this.calendario,
    required this.timeInicio,
    required this.timeTermino,
    required this.local,
    required this.tema,
    required this.treinamento,
    required this.check,
  }) : super(key: key);

  @override
  State<SolicitadoPage> createState() => _TestePageState();
}

class _TestePageState extends State<SolicitadoPage> {
  @override
  Widget build(BuildContext context) {
    int index = widget.index;
    final store = Provider.of<CalendarStore>(context);
    final evento = store.eventos[index];

    return Scaffold(
      body: SizedBox(
        height: MediaQuery.of(context).size.height,
        child: Stack(
          children: [
            const HeaderSolicitadoWidget(),
            Positioned(
              top: 80,
              bottom: 0,
              left: 0,
              right: 0,
              child: Container(
                decoration: const BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                ),
                child: ListView(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Padding(
                          padding: const EdgeInsets.only(left: 15.0),
                          child: Text(
                            widget.loja,
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 20,
                            ),
                          ),
                        ),
                        const SizedBox(height: 5),
                        Padding(
                          padding:
                              const EdgeInsets.only(left: 15.0, bottom: 10),
                          child: Text(
                            "${widget.calendario} - ${widget.timeInicio} Ã s ${widget.timeTermino}",
                          ),
                        ),
                        CardGreyWidget(
                          local: widget.local,
                          tema: widget.tema,
                          treinamento: widget.treinamento,
                        ),
                        const ScrollTitulo(),
                        ElevatedButton(
                            onPressed: () {
                              print(widget.check);
                            },
                            child: Text("dsada")),
                        ConteudoMenu(),
                        const SizedBox(height: 80),
                      ],
                    ),
                  ],
                ),
              ),
            )
          ],
        ),
      ),
      floatingActionButton: widget.check == "a"
          ? FloatingActionButton(
              backgroundColor: ColorsApp.colorItem,
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: const Text('Iniciar Treinamento'),
                      content: const Text(
                          'Deseja confirmar o inÃ­cio do treinamento nesta data e horÃ¡rio?'),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                          child: const Text('CANCELAR'),
                        ),
                        TextButton(
                          onPressed: () {
                            _editarEvento(store, evento, "y");
                            Navigator.of(context).pop();
                          },
                          child: const Text('CONFIRMAR'),
                        ),
                      ],
                    );
                  },
                );
              },
              child: const Icon(Icons.location_on),
            )
          : widget.check == "b"
              ? FlotingActionButtonCustom(
                  onpressed: () {
                    setState(() {
                      _editarEvento(store, evento, "c");
                      Navigator.of(context).pop();
                    });
                  },
                )
              : const Checkout(),
    );
  }

  void _editarEvento(CalendarStore store, Evento evento, String novoChecking) {
    evento.checking = novoChecking; // Atualiza o valor do checking no evento

    store.atualizarEvento(evento); // Atualiza o evento no CalendarStore
  }
}



    final store = Provider.of<HomeStore>(context, listen: false);
    // store.updateSelectedDay(DateTime.now());
    store.loadEventos();